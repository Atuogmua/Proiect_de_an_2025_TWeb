@{
     Layout = "~/Views/Shared/_AdminLayout.cshtml";
     ViewBag.Title = Model?.ID > 0 ? "Edit Product" : "Add Product";
}
@model Shop.Domain.Model.Product.ProductDO

<h2>@ViewBag.Title</h2>

@if (TempData["SuccessMessage"] != null)
{
     <div class="alert alert-success alert-dismissible">
          <button type="button" class="close" data-dismiss="alert">&times;</button>
          @TempData["SuccessMessage"]
     </div>
}

@using (Html.BeginForm(Model?.ID > 0 ? "EditProduct" : "AddProduct", "Admin", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
     @Html.AntiForgeryToken()
     @Html.HiddenFor(m => m.ID)
     @Html.HiddenFor(m => m.ProductImagePath)

     <div class="form-group">
          @Html.LabelFor(m => m.Name, new { @class = "control-label" })
          @Html.TextBoxFor(m => m.Name, new { @class = "form-control" })
          @Html.ValidationMessageFor(m => m.Name, "", new { @class = "text-danger" })
     </div>

     <div class="form-group">
          @Html.LabelFor(m => m.Description, new { @class = "control-label" })
          @Html.TextAreaFor(m => m.Description, new { @class = "form-control", rows = 4 })
          @Html.ValidationMessageFor(m => m.Description, "", new { @class = "text-danger" })
     </div>

     <div class="form-group">
          @Html.LabelFor(m => m.Price, new { @class = "control-label" })
          @Html.TextBoxFor(m => m.Price, new { @class = "form-control", type = "number", step = "0.01", min = "0" })
          @Html.ValidationMessageFor(m => m.Price, "", new { @class = "text-danger" })
     </div>

     <div class="form-group">
          @Html.LabelFor(m => m.Stock, new { @class = "control-label" })
          @Html.TextBoxFor(m => m.Stock, new { @class = "form-control", type = "number", min = "0" })
          @Html.ValidationMessageFor(m => m.Stock, "", new { @class = "text-danger" })
     </div>

     <div class="form-group">
          @Html.LabelFor(m => m.CompanyName, new { @class = "control-label" })
          @Html.TextBoxFor(m => m.CompanyName, new { @class = "form-control" })
          @Html.ValidationMessageFor(m => m.CompanyName, "", new { @class = "text-danger" })
     </div>

     <div class="form-group">
          @Html.LabelFor(m => m.Category, new { @class = "control-label" })
          @Html.DropDownListFor(m => m.Category,
               (IEnumerable<SelectListItem>)ViewBag.Categories,
               "Select a Category",
               new { @class = "form-control" })
          @Html.ValidationMessageFor(m => m.Category, "", new { @class = "text-danger" })
     </div>

     <div class="form-group">
          <label for="ProductImage" class="control-label">Product Image</label>

          <!-- Display current image if exists -->
          @if (!string.IsNullOrEmpty(Model?.ProductImagePath))
          {
               <div class="current-image mb-3">
                    <p><strong>Current Image:</strong></p>
                    <img src="@Url.Content("/Content/images/" + Model.ProductImagePath)"
                         alt="Current Product Image"
                         class="img-thumbnail"
                         style="max-width: 200px; max-height: 200px;"
                         onerror="this.style.display='none'; this.nextElementSibling.style.display='block';">
                    <div style="display: none; color: #666; font-style: italic;">
                         Image not found: @Model.ProductImagePath
                    </div>
               </div>
          }

          <input type="file" name="ProductImage" class="form-control" accept="image/*" />
          <small class="form-text text-muted">
               @if (!string.IsNullOrEmpty(Model?.ProductImagePath))
               {
                    <text>Choose a new image to replace the current one, or leave empty to keep the existing image.</text>
               }
               else
               {
                    <text>Select an image file for this product (jpg, jpeg, png, gif, bmp).</text>
               }
          </small>
     </div>

     <div class="form-group">
          <button type="submit" class="btn btn-primary">
               @(Model?.ID > 0 ? "Update Product" : "Add Product")
          </button>

          <a href="@Url.Action("Index", "Admin")" class="btn btn-secondary">
               @(Model?.ID > 0 ? "Cancel" : "Back to Products")
          </a>
     </div>

     if (!ViewData.ModelState.IsValid)
     {
          <div class="alert alert-danger">
               <strong>Please correct the following errors:</strong>
               @Html.ValidationSummary(false, "", new { @class = "list-unstyled mb-0" })
          </div>
     }
}